include:
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml

variables:
  SCAN_KUBERNETES_MANIFESTS: "true"
  ANSIBLE_FORCE_COLOR: "true"

stages:
  - images
  - test
  - kubernetes
  - ansible
  - github

GithubFinish:
  stage: github
  image: $CI_REGISTRY_IMAGE:toolbox
  script:
    - export VAULT_ADDR=https://vault.${URL}
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=homelab jwt=$CI_JOB_JWT)"
    - export GITHUB_TOKEN="$(vault kv get -field=token secret/gitlab/github)"
    - export DESCRIPTION="Completed Successfully"
    - export STATUS=success
    - gitlab/github-status.sh

Desktop:
  stage: ansible
  image: $CI_REGISTRY_IMAGE:toolbox
  needs: []
  allow_failure: true
  before_script:
    - export VAULT_ADDR=https://vault.${URL}
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=homelab jwt=$CI_JOB_JWT)"
    - export SSH_KNOWN_HOSTS="$(vault kv get -field=known_hosts secret/gitlab/ssh)"
    - export SSH_PRIVATE_KEY="$(vault kv get -field=private_key secret/gitlab/ssh)"
    - export SUDO="$(vault kv get -field=sudo secret/gitlab/ssh)"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ansible-playbook -i ansible/inventory ansible/desktop.yaml --extra-vars "ansible_become_pass=${SUDO} ansible_ssh_pass=${SUDO} ansible_python_interpreter=/usr/bin/python3"

Servers:
  stage: ansible
  image: $CI_REGISTRY_IMAGE:toolbox
  needs: []
  before_script:
    - export VAULT_ADDR=https://vault.${URL}
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=homelab jwt=$CI_JOB_JWT)"
    - export SSH_KNOWN_HOSTS="$(vault kv get -field=known_hosts secret/gitlab/ssh)"
    - export SSH_PRIVATE_KEY="$(vault kv get -field=private_key secret/gitlab/ssh)"
    - export SUDO="$(vault kv get -field=sudo secret/gitlab/ssh)"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - export DISCORD="$(vault kv get -field=webhook secret/gitlab/discord)"
    - sed -i "s,REPLACE_ME,${DISCORD},g" machineConfigs/servers/server/home/arthur/discord/discord_bot.sh
    - sed -i "s,##,,g"  ansible/servers.yaml
  script:
    - ansible-playbook -i ansible/inventory ansible/servers.yaml --extra-vars "ansible_become_pass=${SUDO} ansible_ssh_pass=${SUDO} ansible_python_interpreter=/usr/bin/python3"

Configurations:
  # https://docs.gitlab.com/ee/ci/examples/authenticating-with-hashicorp-vault/
  stage: kubernetes
  when: always
  needs: []
  image: $CI_REGISTRY_IMAGE:toolbox
  environment: production
  before_script:
    - export VAULT_ADDR=https://vault.${URL}
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=homelab jwt=$CI_JOB_JWT)"
  script:
    - gitlab/kubernetes_configurations.sh

Toolbox:
  stage: images
  when: manual
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:toolbox || true
    - docker build --network host -f gitlab/dockerfile --cache-from $CI_REGISTRY_IMAGE:toolbox -t $CI_REGISTRY_IMAGE:toolbox .
    - docker push $CI_REGISTRY_IMAGE:toolbox
