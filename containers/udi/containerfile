# https://github.com/devfile/developer-images
# https://registry.access.redhat.com/ubi9/ubi
FROM registry.access.redhat.com/ubi9:9.3-1361.1699548029

USER 0

ENV \
  ARGOCD_VAULT_VERSION=1.17.0 \
  OKD_VERSION=4.14.0-0.okd-2023-11-14-101924 \
  OPENTOFU_VERSION=1.6.0-beta1 \
  VAULT_VERSION=1.15.3 \
  KO_VERSION=0.15.1 \
  GO_VERSION=1.21.4 \
  GH_VERSION=2.39.2 \
  # 0.6.3 Not Working
  KUBECONFORM_VERSION=0.6.2  \
  MARKDOWNLINT_VERSION=0.32.1 \
  PRETTIER_VERSION=3.1.0 \
  SHELL_CHECK_VERSION=0.9.0 \
  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin \
  HOME=/home/user \
  SHELL=/bin/zsh

#COPY ./repos /etc/yum.repos.d/
COPY ./containers/udi/repos /etc/yum.repos.d/


# UBI 9 Fix
RUN dnf install --disableplugin=subscription-manager libbrotli compat-openssl11 -y

RUN rpm -ivh https://github.com/opentofu/opentofu/releases/download/v${OPENTOFU_VERSION}/tofu_${OPENTOFU_VERSION}_amd64.rpm && \
  dnf install --disableplugin=subscription-manager \
  diffutils git iproute jq less lsof man nano procps \
  perl-Digest-SHA net-tools openssh-clients rsync socat sudo time vim wget zip  pinentry \
  sshpass logrotate unzip MariaDB-client google-cloud-cli tar procps-ng make nodejs ShellCheck -y \
  && dnf update -y && dnf clean all \
  && ln -s /usr/bin/python3.11 /usr/local/bin/python && \
  rm -rf /usr/lib64/google-cloud-sdk/{platform,data,bin/anthoscli} && \
  npm install -g markdownlint-cli@${MARKDOWNLINT_CLI_VERSION} prettier@${PRETTIER_CLI_VERSION}

RUN dnf install --disableplugin=subscription-manager ansible-core ansible -y --nobest && dnf clean all

## gh-cli
RUN \
  TEMP_DIR="$(mktemp -d)"; \
  cd "${TEMP_DIR}"; \
  GH_ARCH="linux_amd64"; \
  GH_TGZ="gh_${GH_VERSION}_${GH_ARCH}.tar.gz"; \
  GH_TGZ_URL="https://github.com/cli/cli/releases/download/v${GH_VERSION}/${GH_TGZ}"; \
  GH_CHEKSUMS_URL="https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_checksums.txt"; \
  curl -sSLO "${GH_TGZ_URL}"; \
  curl -sSLO "${GH_CHEKSUMS_URL}"; \
  sha256sum --ignore-missing -c "gh_${GH_VERSION}_checksums.txt" 2>&1 | grep OK; \
  tar -zxvf "${GH_TGZ}"; \
  mv "gh_${GH_VERSION}_${GH_ARCH}"/bin/gh /usr/local/bin/; \
  mv "gh_${GH_VERSION}_${GH_ARCH}"/share/man/man1/* /usr/local/share/man/man1; \
  cd -; \
  rm -rf "${TEMP_DIR}"

RUN curl -L -o argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${ARGOCD_VAULT_VERSION}/argocd-vault-plugin_${ARGOCD_VAULT_VERSION}_linux_amd64 && \
  chmod +x argocd-vault-plugin && mv argocd-vault-plugin /usr/local/bin

RUN curl -L -o yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64  && \
  chmod +x yq && mv yq /usr/local/bin

RUN curl -L -o openshift-client-linux.tar.gz https://github.com/openshift/okd/releases/download/${OKD_VERSION}/openshift-client-linux-${OKD_VERSION}.tar.gz && \
  tar -xzf openshift-client-linux.tar.gz && mv oc /usr/local/bin/oc && rm -f oc kubectl openshift-client-linux.tar.gz && ln -svf /usr/local/bin/oc /usr/local/bin/kubectl

RUN curl -L -o vault_linux_amd64.zip https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip && \
  unzip vault_linux_amd64.zip && chmod +x vault && mv vault /usr/local/bin/ && rm -f vault_linux_amd64.zip

RUN  curl -L -o ko_Linux_x86_64.tar.gz https://github.com/ko-build/ko/releases/download/v${KO_VERSION}/ko_${KO_VERSION}_Linux_x86_64.tar.gz && \
  tar -xzf ko_Linux_x86_64.tar.gz && mv ko /usr/local/bin/ko && rm -f ko_Linux_x86_64.tar.gz

RUN curl -L -o go.linux-amd64.tar.gz https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz && \
  tar -xzf go.linux-amd64.tar.gz --no-same-owner -C /usr/local && rm -f go.linux-amd64.tar.gz

RUN curl -L -o kubeconform-linux-amd64.tar.gz https://github.com/yannh/kubeconform/releases/download/v${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz && \
  tar -xzf kubeconform-linux-amd64.tar.gz && chmod +x kubeconform && mv kubeconform /usr/local/bin/ && rm -f kubeconform-linux-amd64.tar.gz

#COPY --chown=0:0 entrypoint.sh /
COPY --chown=0:0  ./containers/udi/entrypoint.sh /

RUN \
  mkdir /home/tooling && \
  # add user and configure it
  useradd -u 10001 -G wheel,root -d /home/user --shell /bin/bash -m user && \
  # Setup $PS1 for a consistent and reasonable prompt
  echo "export PS1='\W \`git branch --show-current 2>/dev/null | sed -r -e \"s@^(.+)@\(\1\) @\"\`$ '" >> /home/tooling/.bashrc && \
  # Set permissions on /etc/passwd and /home to allow arbitrary users to write
  chgrp -R 0 /home && \
  chmod -R g=u /etc/passwd /etc/group /home && \
  chmod +x /entrypoint.sh

RUN git clone https://github.com/ohmyzsh/ohmyzsh.git /home/tooling/.oh-my-zsh \
  && git clone https://github.com/zsh-users/zsh-autosuggestions /usr/share/zsh-autosuggestions \
  && git clone https://github.com/zsh-users/zsh-syntax-highlighting /usr/share/zsh-syntax-highlighting \
  && curl -o /home/tooling/.oh-my-zsh/themes/custom.zsh-theme https://raw.githubusercontent.com/ArthurVardevanyan/HomeLab/production/machineConfigs/desktop/home/arthur/.oh-my-zsh/themes/custom.zsh-theme \
  && curl -o /home/tooling/.zshrc https://raw.githubusercontent.com/ArthurVardevanyan/HomeLab/production/machineConfigs/desktop/home/arthur/.zshrc \
  && dnf install --disableplugin=subscription-manager zsh autojump -y && dnf clean all

RUN curl -o /home/tooling/.gitconfig https://raw.githubusercontent.com/ArthurVardevanyan/HomeLab/production/machineConfigs/desktop/home/arthur/.gitconfig

USER 10001
WORKDIR /projects
ENTRYPOINT [ "/entrypoint.sh" ]
CMD ["tail", "-f", "/dev/null"]
