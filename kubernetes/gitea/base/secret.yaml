apiVersion: v1
kind: Secret
metadata:
  name: gitea-inline-config
  namespace: gitea
  labels:
    helm.sh/chart: gitea-9.4.0
    app: gitea
    app.kubernetes.io/name: gitea
    app.kubernetes.io/instance: gitea
    app.kubernetes.io/version: "1.20.5"
    version: "1.20.5"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  _generals_: ""
  attachment: |-
    MINIO_ACCESS_KEY_ID=<path:secret/data/homelab/gitea/minio#access_key>
    MINIO_BUCKET=gitea-889dbe0b-c231-4937-a9dc-d1232e26d17d
    MINIO_ENDPOINT=rook-ceph-rgw-rook-ceph-obj.rook-ceph.svc:8080
    MINIO_LOCATION=homelab
    MINIO_SECRET_ACCESS_KEY=<path:secret/data/homelab/gitea/minio#secret_key>
    MINIO_USE_SSL=false
    SERVE_DIRECT=false
    STORAGE_TYPE=minio
  cache: |-
    ADAPTER=redis
    ENABLED=true
    HOST=redis://gitea-dragonfly.gitea.svc:6379
  cron.GIT_GC_REPOS: test=false
  database: |-
    DB_TYPE=postgres
    HOST=gitea-primary.gitea.svc
    NAME=gitea
    PASSWD=<path:secret/data/homelab/gitea/gitea/#admin_pass>
    USER=gitea
  indexer: |-
    ISSUE_INDEXER_CONN_STR=http://gitea-meilisearch.gitea.svc:7700
    ISSUE_INDEXER_ENABLED=true
    ISSUE_INDEXER_TYPE=meilisearch
    REPO_INDEXER_ENABLED=false
  metrics: |
    ENABLED=true
    ENABLED_ISSUE_BY_LABEL=true
    ENABLED_ISSUE_BY_REPOSITORY=true
  queue: |-
    CONN_STR=redis://gitea-dragonfly.gitea.svc:6379
    TYPE=redis
  repository: |
    ROOT=/data/git/gitea-repositories
    ENABLE_PUSH_CREATE_USER=true
  security: INSTALL_LOCK=true
  server: |-
    APP_DATA_PATH=/data
    DOMAIN=git.arthurvardevanyan.com
    ENABLE_PPROF=true
    HTTP_PORT=3000
    PROTOCOL=https
    ROOT_URL=https://git.arthurvardevanyan.com
    SSH_DOMAIN=git.arthurvardevanyan.com
    SSH_LISTEN_PORT=2222
    SSH_PORT=22
    START_SSH_SERVER=true
    CERT_FILE = /cert/tls.crt
    KEY_FILE  = /cert/tls.key
  webhook: |-
    ALLOWED_HOST_LIST="*"
  session: |-
    PROVIDER=redis
    PROVIDER_CONFIG=redis://gitea-dragonfly.gitea.svc:6379
  storage: |-
    MINIO_ACCESS_KEY_ID=<path:secret/data/homelab/gitea/minio#access_key>
    MINIO_BUCKET=gitea-889dbe0b-c231-4937-a9dc-d1232e26d17d
    MINIO_ENDPOINT=rook-ceph-rgw-rook-ceph-obj.rook-ceph.svc:8080
    MINIO_LOCATION=homelab
    MINIO_SECRET_ACCESS_KEY=<path:secret/data/homelab/gitea/minio#secret_key>
    MINIO_USE_SSL=false
    SERVE_DIRECT=false
    STORAGE_TYPE=minio
---
# Source: gitea/templates/gitea/config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gitea-configs
  namespace: gitea
  labels:
    helm.sh/chart: gitea-9.4.0
    app: gitea
    app.kubernetes.io/name: gitea
    app.kubernetes.io/instance: gitea
    app.kubernetes.io/version: "1.20.5"
    version: "1.20.5"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  assertions: |
  config_environment.sh: |-
    #!/usr/bin/env bash
    set -euo pipefail

    function env2ini::log() {
      printf "${1}\n"
    }

    function env2ini::read_config_to_env() {
      local section="${1}"
      local line="${2}"

      if [[ -z "${line}" ]]; then
        # skip empty line
        return
      fi

      # 'xargs echo -n' trims all leading/trailing whitespaces and a trailing new line
      local setting="$(awk -F '=' '{print $1}' <<< "${line}" | xargs echo -n)"

      if [[ -z "${setting}" ]]; then
        env2ini::log '  ! invalid setting'
        exit 1
      fi

      local value=''
      local regex="^${setting}(\s*)=(\s*)(.*)"
      if [[ $line =~ $regex ]]; then
        value="${BASH_REMATCH[3]}"
      else
        env2ini::log '  ! invalid setting'
        exit 1
      fi

      env2ini::log "    + '${setting}'"

      if [[ -z "${section}" ]]; then
        export "GITEA____${setting^^}=${value}"                           # '^^' makes the variable content uppercase
        return
      fi

      local masked_section="${section//./_0X2E_}"                            # '//' instructs to replace all matches
      masked_section="${masked_section//-/_0X2D_}"

      export "GITEA__${masked_section^^}__${setting^^}=${value}"        # '^^' makes the variable content uppercase
    }

    function env2ini::reload_preset_envs() {
      env2ini::log "Reloading preset envs..."

      while read -r line; do
        if [[ -z "${line}" ]]; then
          # skip empty line
          return
        fi

        # 'xargs echo -n' trims all leading/trailing whitespaces and a trailing new line
        local setting="$(awk -F '=' '{print $1}' <<< "${line}" | xargs echo -n)"

        if [[ -z "${setting}" ]]; then
          env2ini::log '  ! invalid setting'
          exit 1
        fi

        local value=''
        local regex="^${setting}(\s*)=(\s*)(.*)"
        if [[ $line =~ $regex ]]; then
          value="${BASH_REMATCH[3]}"
        else
          env2ini::log '  ! invalid setting'
          exit 1
        fi

        env2ini::log "  + '${setting}'"

        export "${setting^^}=${value}"                           # '^^' makes the variable content uppercase
      done < "/tmp/existing-envs"

      rm /tmp/existing-envs
    }


    function env2ini::process_config_file() {
      local config_file="${1}"
      local section="$(basename "${config_file}")"

      if [[ $section == '_generals_' ]]; then
        env2ini::log "  [ini root]"
        section=''
      else
        env2ini::log "  ${section}"
      fi

      while read -r line; do
        env2ini::read_config_to_env "${section}" "${line}"
      done < <(awk 1 "${config_file}")                             # Helm .toYaml trims the trailing new line which breaks line processing; awk 1 ... adds it back while reading
    }

    function env2ini::load_config_sources() {
      local path="${1}"

      if [[ -d "${path}" ]]; then
        env2ini::log "Processing $(basename "${path}")..."

        while read -d '' configFile; do
          env2ini::process_config_file "${configFile}"
        done < <(find "${path}" -type l -not -name '..data' -print0)

        env2ini::log "\n"
      fi
    }

    function env2ini::generate_initial_secrets() {
      # These environment variables will either be
      #   - overwritten with user defined values,
      #   - initially used to set up Gitea
      # Anyway, they won't harm existing app.ini files

      export GITEA__SECURITY__INTERNAL_TOKEN=$(gitea generate secret INTERNAL_TOKEN)
      export GITEA__SECURITY__SECRET_KEY=$(gitea generate secret SECRET_KEY)
      export GITEA__OAUTH2__JWT_SECRET=$(gitea generate secret JWT_SECRET)
      export GITEA__SERVER__LFS_JWT_SECRET=$(gitea generate secret LFS_JWT_SECRET)

      env2ini::log "...Initial secrets generated\n"
    }

    # save existing envs prior to script execution. Necessary to keep order of preexisting and custom envs
    env | (grep GITEA || [[ $? == 1 ]]) > /tmp/existing-envs

    # MUST BE CALLED BEFORE OTHER CONFIGURATION
    env2ini::generate_initial_secrets

    env2ini::load_config_sources '/env-to-ini-mounts/inlines/'
    env2ini::load_config_sources '/env-to-ini-mounts/additionals/'

    # load existing envs to override auto generated envs
    env2ini::reload_preset_envs

    env2ini::log "=== All configuration sources loaded ===\n"

    # safety to prevent rewrite of secret keys if an app.ini already exists
    if [ -f ${GITEA_APP_INI} ]; then
      env2ini::log 'An app.ini file already exists. To prevent overwriting secret keys, these settings are dropped and remain unchanged:'
      env2ini::log '  - security.INTERNAL_TOKEN'
      env2ini::log '  - security.SECRET_KEY'
      env2ini::log '  - oauth2.JWT_SECRET'
      env2ini::log '  - server.LFS_JWT_SECRET'

      unset GITEA__SECURITY__INTERNAL_TOKEN
      unset GITEA__SECURITY__SECRET_KEY
      unset GITEA__OAUTH2__JWT_SECRET
      unset GITEA__SERVER__LFS_JWT_SECRET
    fi

    environment-to-ini -o $GITEA_APP_INI
---
# Source: gitea/templates/gitea/init.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gitea-init
  namespace: gitea
  labels:
    helm.sh/chart: gitea-9.4.0
    app: gitea
    app.kubernetes.io/name: gitea
    app.kubernetes.io/instance: gitea
    app.kubernetes.io/version: "1.20.5"
    version: "1.20.5"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  configure_gpg_environment.sh: |-
    #!/usr/bin/env bash
    set -eu

    gpg --batch --import /raw/private.asc
  init_directory_structure.sh: |-
    #!/usr/bin/env bash

    set -euo pipefail

    set -x
    mkdir -p /data/git/.ssh
    chmod -R 700 /data/git/.ssh
    [ ! -d /data/gitea/conf ] && mkdir -p /data/gitea/conf

    # prepare temp directory structure
    mkdir -p "${GITEA_TEMP}"
    chmod ug+rwx "${GITEA_TEMP}"

  configure_gitea.sh: |-
    #!/usr/bin/env bash

    set -euo pipefail

    echo '==== BEGIN GITEA CONFIGURATION ===='

    { # try
      gitea migrate
    } || { # catch
      echo "Gitea migrate might fail due to database connection...This init-container will try again in a few seconds"
      exit 1
    }
    function configure_admin_user() {
      local ACCOUNT_ID=$(gitea admin user list --admin | grep -e "\s\+${GITEA_ADMIN_USERNAME}\s\+" | awk -F " " "{printf \$1}")
      if [[ -z "${ACCOUNT_ID}" ]]; then
        echo "No admin user '${GITEA_ADMIN_USERNAME}' found. Creating now..."
        gitea admin user create --admin --username "${GITEA_ADMIN_USERNAME}" --password "${GITEA_ADMIN_PASSWORD}" --email "noreply@arthurvardevanyan.com" --must-change-password=false
        echo '...created.'
      else
        echo "Admin account '${GITEA_ADMIN_USERNAME}' already exist. Running update to sync password..."
        gitea admin user change-password --username "${GITEA_ADMIN_USERNAME}" --password "${GITEA_ADMIN_PASSWORD}"
        echo '...password sync done.'
      fi
    }

    configure_admin_user

    function configure_ldap() {
        echo 'no ldap configuration... skipping.'
    }

    configure_ldap

    function configure_oauth() {
      local OAUTH_NAME='Zitadel'
      local AUTH_ID=$(gitea admin auth list --vertical-bars | grep -E "\|${OAUTH_NAME}\s+\|" | grep -iE '\|OAuth2\s+\|' | awk -F " "  "{print \$1}")

      if [[ -z "${AUTH_ID}" ]]; then
        echo "No oauth configuration found with name '${OAUTH_NAME}'. Installing it now..."
        gitea admin auth add-oauth --auto-discover-url "https://zitadel.arthurvardevanyan.com/.well-known/openid-configuration" --key "<path:secret/data/homelab/gitea/zitadel#client_id>" --name "Zitadel" --provider "openidConnect" --secret "<path:secret/data/homelab/gitea/zitadel#client_secret>"
        echo '...installed.'
      else
        echo "Existing oauth configuration with name '${OAUTH_NAME}': '${AUTH_ID}'. Running update to sync settings..."
        gitea admin auth update-oauth --id "${AUTH_ID}" --auto-discover-url "https://zitadel.arthurvardevanyan.com/.well-known/openid-configuration" --key "<path:secret/data/homelab/gitea/zitadel#client_id>" --name "Zitadel" --provider "openidConnect" --secret "<path:secret/data/homelab/gitea/zitadel#client_secret>"
        echo '...sync settings done.'
      fi
    }

    configure_oauth

    echo '==== END GITEA CONFIGURATION ===='
---

