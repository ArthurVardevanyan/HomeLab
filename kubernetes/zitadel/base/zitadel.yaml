---
# Source: zitadel/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
spec:
  # test if both are set and if so return error
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zitadel
      app.kubernetes.io/instance: zitadel
---
# Source: zitadel/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http2-server
      appProtocol: http2
  selector:
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
---
# Source: zitadel/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: start
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: zitadel
      app.kubernetes.io/instance: zitadel
  template:
    metadata:
      annotations:
        checksum/configmap: 5f9dd562d3b3b5be1bd8555bc8ec7a48d3fb9060bbe188fa996487f853bfe52e
        checksum/secret-db-ssl-root-crt: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/secret-zitadel-secrets: fd536719e56c2acfcafe2dfdd53cce617f6c0b3b5b26c316398ed98b42664845
      labels:
        app.kubernetes.io/component: start
        app.kubernetes.io/name: zitadel
        app.kubernetes.io/instance: zitadel
    spec:
      serviceAccountName: zitadel
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      enableServiceLinks: false
      containers:
        - name: zitadel
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - all
          image: "ghcr.io/zitadel/zitadel:v2.23.1"
          imagePullPolicy: IfNotPresent
          args:
            - start
            - --config
            - /config/zitadel-config-yaml
            - --config
            - /.secrets/zitadel-secrets-yaml
            - --masterkeyFile
            - /.secrets/masterkey
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: ZITADEL_DATABASE_COCKROACH_USER_SSL_ROOTCERT
              value: /.secrets/ca.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_ROOTCERT
              value: /.secrets/ca.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_CERT
              value: /.secrets/tls.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_KEY
              value: /.secrets/tls.key
          ports:
            - containerPort: 8080
              name: http2-server
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /debug/healthz
              port: http2-server
              httpHeaders:
                - name: Host
                  value: zitadel.apps.okd.<path:secret/data/homelab/domain#url>
            periodSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /debug/ready
              port: http2-server
              httpHeaders:
                - name: Host
                  value: zitadel.apps.okd.<path:secret/data/homelab/domain#url>
            periodSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /debug/ready
              port: http2-server
              httpHeaders:
                - name: Host
                  value: zitadel.apps.okd.<path:secret/data/homelab/domain#url>
            periodSeconds: 1
            failureThreshold: 30
          volumeMounts:
            - name: zitadel-config-yaml
              mountPath: /config
            - name: chowned-secrets
              mountPath: /.secrets
          resources:
            limits:
              cpu: 150m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
      initContainers:
        - args:
            - "cp /db-ssl-client-crt/* /chowned-secrets/ && cp /db-ssl-root-crt/* /chowned-secrets/ && cp /masterkey/* /chowned-secrets/ && cp /zitadel-secrets-yaml/* /chowned-secrets/  && chmod 400 /chowned-secrets/*"
          command:
            - sh
            - -c
          image: "alpine:3.11"
          imagePullPolicy: IfNotPresent
          name: chown
          volumeMounts:
            - name: chowned-secrets
              mountPath: /chowned-secrets
            - name: masterkey
              mountPath: /masterkey
            - name: zitadel-secrets-yaml
              mountPath: /zitadel-secrets-yaml
            - name: db-ssl-root-crt
              mountPath: /db-ssl-root-crt
            - name: db-ssl-client-crt
              mountPath: /db-ssl-client-crt
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - all
      volumes:
        - name: zitadel-config-yaml
          configMap:
            name: zitadel-config-yaml
        - name: zitadel-secrets-yaml
          secret:
            secretName: zitadel-secrets-yaml
        - name: db-ssl-root-crt
          secret:
            secretName: crdb-ca
        - name: db-ssl-client-crt
          secret:
            secretName: crdb-root
        - name: masterkey
          secret:
            secretName: zitadel-masterkey
        - name: chowned-secrets
          emptyDir: {}
---
# Source: zitadel/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
spec:
  endpoints:
    - port: http2-server
      path: /debug/metrics
      honorLabels: false
      honorTimestamps: true
  jobLabel: zitadel
  namespaceSelector:
    matchNames:
      - "default"
  selector:
    matchLabels:
      app.kubernetes.io/name: zitadel
      app.kubernetes.io/instance: zitadel
---
# Source: zitadel/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: zitadel/templates/secret_zitadel-masterkey.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: zitadel-masterkey
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
stringData:
  masterkey: <path:secret/data/homelab/zitadel/config#masterkey>
---
# Source: zitadel/templates/secret_zitadel-secrets.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: zitadel-secrets-yaml
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
stringData:
  zitadel-secrets-yaml: |-

    Database:
      cockroach:
        Host: crdb-public
        User:
          Password: "<path:secret/data/homelab/zitadel/config#db-password>"
---
# Source: zitadel/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zitadel-config-yaml
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
data:
  zitadel-config-yaml: |-

    Database:
      cockroach:
        Admin:
          SSL:
            Mode: verify-full
        Host: crdb-public
        User:
          SSL:
            Mode: verify-full
    ExternalDomain: zitadel.apps.okd.<path:secret/data/homelab/domain#url>
    ExternalPort: 443
    ExternalSecure: true
    FirstInstance:
      Org:
        Machine: false
    Machine:
      Identification:
        Hostname:
          Enabled: true
        Webhook:
          Enabled: false
    TLS:
      Enabled: false
      dbSslClientCrtSecret: crdb-root
    dbSslRootCrtSecret: crdb-ca
---
# Source: zitadel/templates/initjob.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "zitadel-init"
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: init
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zitadel
        app.kubernetes.io/instance: zitadel
        app.kubernetes.io/component: init
    spec:
      serviceAccountName: zitadel
      securityContext:
        runAsNonRoot: true
        readOnlyRootFilesystem: false
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop:
            - all
      enableServiceLinks: false
      restartPolicy: OnFailure
      containers:
        - name: "zitadel-init"
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - all
          image: "ghcr.io/zitadel/zitadel:v2.23.1"
          imagePullPolicy: IfNotPresent
          args:
            - init
            - --config
            - /config/zitadel-config-yaml
            - --config
            - /.secrets/zitadel-secrets-yaml
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: ZITADEL_DATABASE_COCKROACH_USER_SSL_ROOTCERT
              value: /.secrets/ca.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_ROOTCERT
              value: /.secrets/ca.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_CERT
              value: /.secrets/tls.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_KEY
              value: /.secrets/tls.key
          volumeMounts:
            - name: zitadel-config-yaml
              mountPath: /config
            - name: chowned-secrets
              mountPath: /.secrets
          resources:
            limits:
              cpu: 75m
              memory: 256Mi
            requests:
              cpu: 25m
              memory: 128Mi
      initContainers:
        - args:
            - "cp /db-ssl-client-crt/* /chowned-secrets/ && cp /db-ssl-root-crt/* /chowned-secrets/ && cp /zitadel-secrets-yaml/* /chowned-secrets/  && chmod 400 /chowned-secrets/*"
          command:
            - sh
            - -c
          image: "alpine:3.11"
          imagePullPolicy: IfNotPresent
          name: chown
          volumeMounts:
            - name: chowned-secrets
              mountPath: /chowned-secrets
            - name: zitadel-secrets-yaml
              mountPath: /zitadel-secrets-yaml
            - name: db-ssl-root-crt
              mountPath: /db-ssl-root-crt
            - name: db-ssl-client-crt
              mountPath: /db-ssl-client-crt
          securityContext:
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: zitadel-config-yaml
          configMap:
            name: zitadel-config-yaml
        - name: zitadel-secrets-yaml
          secret:
            secretName: zitadel-secrets-yaml
        - name: db-ssl-root-crt
          secret:
            secretName: crdb-ca
        - name: db-ssl-client-crt
          secret:
            secretName: crdb-root
        - name: chowned-secrets
          emptyDir: {}
---
# Source: zitadel/templates/setupjob.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "zitadel-setup"
  labels:
    helm.sh/chart: zitadel-4.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.23.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: setup
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zitadel
        app.kubernetes.io/instance: zitadel
        app.kubernetes.io/component: setup
    spec:
      serviceAccountName: zitadel
      securityContext:
        runAsNonRoot: true
        readOnlyRootFilesystem: false
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop:
            - all
      enableServiceLinks: false
      restartPolicy: OnFailure
      containers:
        - name: "zitadel-setup"
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - all
          image: "ghcr.io/zitadel/zitadel:v2.23.1"
          imagePullPolicy: IfNotPresent
          args:
            - setup
            - --config
            - /config/zitadel-config-yaml
            - --config
            - /.secrets/zitadel-secrets-yaml
            - --steps
            - /config/zitadel-config-yaml
            - --masterkeyFile
            - /.secrets/masterkey
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: ZITADEL_DATABASE_COCKROACH_USER_SSL_ROOTCERT
              value: /.secrets/ca.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_ROOTCERT
              value: /.secrets/ca.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_CERT
              value: /.secrets/tls.crt
            - name: ZITADEL_DATABASE_COCKROACH_ADMIN_SSL_KEY
              value: /.secrets/tls.key
          volumeMounts:
            - name: zitadel-config-yaml
              mountPath: /config
            - name: chowned-secrets
              mountPath: /.secrets
          resources:
            limits:
              cpu: 75m
              memory: 256Mi
            requests:
              cpu: 25m
              memory: 128Mi
      initContainers:
        - args:
            - "cp /db-ssl-client-crt/* /chowned-secrets/ && cp /db-ssl-root-crt/* /chowned-secrets/ && cp /masterkey/* /chowned-secrets/ && cp /zitadel-secrets-yaml/* /chowned-secrets/  && chmod 400 /chowned-secrets/*"
          command:
            - sh
            - -c
          image: "alpine:3.11"
          imagePullPolicy: IfNotPresent
          name: chown
          volumeMounts:
            - name: chowned-secrets
              mountPath: /chowned-secrets
            - name: masterkey
              mountPath: /masterkey
            - name: zitadel-secrets-yaml
              mountPath: /zitadel-secrets-yaml
            - name: db-ssl-root-crt
              mountPath: /db-ssl-root-crt
            - name: db-ssl-client-crt
              mountPath: /db-ssl-client-crt
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - all
      volumes:
        - name: zitadel-config-yaml
          configMap:
            name: zitadel-config-yaml
        - name: zitadel-secrets-yaml
          secret:
            secretName: zitadel-secrets-yaml
        - name: db-ssl-root-crt
          secret:
            secretName: crdb-ca
        - name: db-ssl-client-crt
          secret:
            secretName: crdb-root
        - name: masterkey
          secret:
            secretName: zitadel-masterkey
        - name: chowned-secrets
          emptyDir: {}
