apiVersion: v1
kind: ServiceAccount
metadata:
  name: zitadel-cert-creator
  namespace: zitadel
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-creator
  namespace: zitadel
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: zitadel-cert-creator
  namespace: zitadel
subjects:
  - kind: ServiceAccount
    name: zitadel-cert-creator
roleRef:
  kind: Role
  name: secret-creator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-zitadel-cert
  namespace: zitadel
  annotations:
    checkov.io/skip1: CKV_K8S_40=OpenShift Injects Random UID
    checkov.io/skip2: CKV_K8S_38=Required to Create Secrets
spec:
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: zitadel-cert-creator
      automountServiceAccountToken: true
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - command:
            - /bin/bash
            - -ecx
            - |
              cockroach cert create-client \
              --certs-dir /cockroach/cockroach-certs \
              --ca-key /cockroach/cockroach-certs/ca.key \
              --lifetime 8760h \
              zitadel
              export SECRET=$(cat <<EOF
              {
                "apiVersion": "v1",
                "kind": "Secret",
                "data": {
                  "ca.crt": "$(base64 /cockroach/cockroach-certs/ca.crt --wrap 0)",
                  "tls.crt": "$(base64 /cockroach/cockroach-certs/client.zitadel.crt --wrap 0)",
                  "tls.key": "$(base64 /cockroach/cockroach-certs/client.zitadel.key --wrap 0)"
                },
                "metadata": {
                  "name": "db-cockroachdb-zitadel-secret"
                },
                "type": "kubernetes.io/tls"
              }
              EOF
              )
              export APISERVER=https://kubernetes.default.svc SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
              export NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace) TOKEN=$(cat ${SERVICEACCOUNT}/token) CACERT=${SERVICEACCOUNT}/ca.crt
              curl \
              --cacert ${CACERT} \
              --header "Authorization: Bearer ${TOKEN}" \
              --header "Content-Type: application/json" \
              -X POST ${APISERVER}/api/v1/namespaces/${NAMESPACE}/secrets \
              --data "$(echo -n $SECRET | tr -d '\n')"
          image: cockroachdb/cockroach:v23.1.13@sha256:f0c3295eb2e226fae50bbf5118cc432889dd0fbae639d5143b4ef88775de9283
          imagePullPolicy: IfNotPresent
          name: create-zitadel-cert
          volumeMounts:
            - mountPath: /cockroach/cockroach-certs/
              name: certs
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: 75m
              memory: 256Mi
            requests:
              cpu: 25m
              memory: 128Mi
      initContainers:
        - command:
            - /bin/sh
            - -c
            - cp -f /certs/* /cockroach-certs/; chmod 0400 /cockroach-certs/*.key
          image: busybox:1.36.1@sha256:8b4700b29069264d0c5b9f7573aeeb94c5f295f07a1e887ef6fe4219b0317e70
          imagePullPolicy: IfNotPresent
          name: copy-certs
          volumeMounts:
            - mountPath: /cockroach-certs/
              name: certs
            - mountPath: /certs/
              name: certs-secret
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: 75m
              memory: 256Mi
            requests:
              cpu: 25m
              memory: 128Mi
      volumes:
        - emptyDir: {}
          name: certs
        - name: certs-secret
          projected:
            defaultMode: 420
            sources:
              - secret:
                  items:
                    - key: ca.crt
                      mode: 256
                      path: ca.crt
                    - key: ca.key
                      mode: 256
                      path: ca.key
                  name: crdb-ca
