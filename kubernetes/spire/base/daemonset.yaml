---
# Source: spire/charts/spiffe-csi-driver/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: spire-spiffe-csi-driver
  namespace: spire-system
  labels:
    helm.sh/chart: spiffe-csi-driver-0.1.0
    app.kubernetes.io/name: spiffe-csi-driver
    app.kubernetes.io/instance: spire
    app.kubernetes.io/version: "0.2.7"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: spiffe-csi-driver
      app.kubernetes.io/instance: spire
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: spiffe-csi-driver
        app.kubernetes.io/instance: spire
    spec:
      serviceAccountName: spire-spiffe-csi-driver

      priorityClassName: system-node-critical
      initContainers:
        - name: set-context
          command:
            - chcon
            - "-Rvt"
            - container_file_t
            - spire-agent-socket/
          image: "registry.access.redhat.com/ubi9/ubi:9.5-1744101466@sha256:6db9bfa8c17ca247dcd53970df5f4e90fa423d6deaaa7096e48aba986de906e8"
          imagePullPolicy: Always
          securityContext:
            capabilities:
              drop:
                - all
            privileged: true
          volumeMounts:
            - name: spire-agent-socket-dir
              mountPath: /spire-agent-socket
          terminationMessagePolicy: File
          terminationMessagePath: /dev/termination-log
      containers:
        # This is the container which runs the SPIFFE CSI driver.
        - name: spiffe-csi-driver
          image: "ghcr.io/spiffe/spiffe-csi-driver:0.2.7@sha256:9dfe4f0caff096164fd921aa7f15319804df2fc0325f1d90bc793ef3256ab1cd"
          imagePullPolicy: IfNotPresent
          args:
            [
              "-workload-api-socket-dir",
              "/spire-agent-socket",
              "-plugin-name",
              "csi.spiffe.io",
              "-csi-socket-path",
              "/spiffe-csi/csi.sock",
            ]
          env:
            # The CSI driver needs a unique node ID. The node name can be
            # used for this purpose.
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            # The volume containing the SPIRE agent socket. The SPIFFE CSI
            # driver will mount this directory into containers.
            - mountPath: /spire-agent-socket
              name: spire-agent-socket-dir
              readOnly: true
            # The volume that will contain the CSI driver socket shared
            # with the kubelet and the driver registrar.
            - mountPath: /spiffe-csi
              name: spiffe-csi-socket-dir
            # The volume containing mount points for containers.
            - mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
              name: mountpoint-dir
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all
            privileged: true
          resources:
            limits:
              cpu: 20m
              memory: 24Mi
            requests:
              cpu: 10m
              memory: 12Mi
        # This container runs the CSI Node Driver Registrar which takes care
        # of all the little details required to register a CSI driver with
        # the kubelet.
        - name: node-driver-registrar
          image: "registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.9.4@sha256:ab6c4603d8da43d9f33361a5716552080e3f72badfad099d76fcf4b59e547d80"
          imagePullPolicy: IfNotPresent
          args:
            [
              "-csi-address",
              "/spiffe-csi/csi.sock",
              "-kubelet-registration-path",
              "/var/lib/kubelet/plugins/csi.spiffe.io/csi.sock",
              "-health-port",
              "9809",
            ]
          volumeMounts:
            # The registrar needs access to the SPIFFE CSI driver socket
            - mountPath: /spiffe-csi
              name: spiffe-csi-socket-dir
            # The registrar needs access to the Kubelet plugin registration
            # directory
            - name: kubelet-plugin-registration-dir
              mountPath: /registration
          ports:
            - containerPort: 9809
              name: healthz
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 5
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 20m
              memory: 24Mi
            requests:
              cpu: 10m
              memory: 12Mi
      volumes:
        - name: spire-agent-socket-dir
          hostPath:
            path: /run/spire/agent-sockets
            type: DirectoryOrCreate
        # This volume is where the socket for kubelet->driver communication lives
        - name: spiffe-csi-socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi.spiffe.io
            type: DirectoryOrCreate
        # This volume is where the SPIFFE CSI driver mounts volumes
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        # This volume is where the node-driver-registrar registers the plugin
        # with kubelet
        - name: kubelet-plugin-registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
---
# Source: spire/charts/spire-agent/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: "spire-agent"
  namespace: "spire-system"
  labels:
    helm.sh/chart: "spire-agent-0.1.0"
    app.kubernetes.io/name: "agent"
    app.kubernetes.io/instance: "spire"
    app.kubernetes.io/version: "1.12.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: "default"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: "agent"
      app.kubernetes.io/instance: "spire"
      app.kubernetes.io/component: "default"
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: spire-agent
        checksum/config: "6fe7a447bb276f87d40d4b01d2991227b726bf53973130e89c4870e68f5be605"
      labels:
        app.kubernetes.io/name: "agent"
        app.kubernetes.io/instance: "spire"
        app.kubernetes.io/component: "default"
    spec:
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: "spire-agent"
      securityContext:
        fsGroupChangePolicy: OnRootMismatch

      priorityClassName: system-node-critical
      initContainers:
        - name: ensure-alternate-names
          image: "cgr.dev/chainguard/bash:latest@sha256:ce272ee5a3739a3c45784c317b2fb1e93a4cc4ea1f4d3feabb702b278e5bf514"
          imagePullPolicy: "Always"
          command: ["bash", "-xc"]
          args:
            - |
              cd /run/spire/agent-sockets
              L=`readlink socket`
              [ "x$L" != "xspire-agent.sock" ] && rm -f socket
              [ ! -L socket ] && ln -s spire-agent.sock socket
              L=`readlink api.sock`
              [ "x$L" != "xspire-agent.sock" ] && rm -f api.sock
              [ ! -L api.sock ] && ln -s spire-agent.sock api.sock
              [ -L spire-agent.sock ] && rm -f spire-agent.sock
              exit 0
          resources:
            limits:
              cpu: 20m
              memory: 24Mi
            requests:
              cpu: 10m
              memory: 12Mi
          volumeMounts:
            - name: spire-agent-socket-dir
              mountPath: /run/spire/agent-sockets
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      containers:
        - name: "spire-agent"
          image: "ghcr.io/spiffe/spire-agent:1.12.0@sha256:8fd8061d354dab68b64b000f74603d2be7a667f04bdb349b665ab064cb7aff9b"
          imagePullPolicy: "IfNotPresent"
          args: ["-config", "/opt/spire/conf/agent/agent.conf"]
          securityContext: {}
          env:
            - name: PATH
              value: "/opt/spire/bin:/bin"
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 9982
              name: healthz
            - containerPort: 9988
              name: prom
          volumeMounts:
            - name: spire-config
              mountPath: /opt/spire/conf/agent
              readOnly: true
            - name: spire-agent-persistence
              mountPath: /var/lib/spire
            - name: spire-bundle
              readOnly: true
              mountPath: /run/spire/bundle
            - name: spire-agent-socket-dir
              mountPath: /tmp/spire-agent/public
              readOnly: false
            - name: spire-token
              mountPath: /var/run/secrets/tokens
          livenessProbe:
            httpGet:
              path: /live
              port: healthz
            initialDelaySeconds: 15
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /ready
              port: healthz
            initialDelaySeconds: 10
            periodSeconds: 30
          resources:
            limits:
              cpu: 50m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 256Mi
      volumes:
        - name: spire-config
          configMap:
            name: spire-agent
        - name: spire-agent-admin-socket-dir
          emptyDir: {}
        - name: spire-agent-persistence
          emptyDir: {}
        - name: spire-bundle
          configMap:
            name: "spire-bundle"
        - name: spire-token
          projected:
            sources:
              - serviceAccountToken:
                  path: spire-agent
                  expirationSeconds: 7200
                  audience: spire-server
        - name: spire-agent-socket-dir
          hostPath:
            path: /run/spire/agent-sockets
            type: DirectoryOrCreate
