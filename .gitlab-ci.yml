stages:
  - build
  - ansible
  - kubernetes

AnsibleBuild:
  stage: build
  when: manual
  image: docker:latest
  services:
    - name: docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:ansible || true
    - docker build -f ansible/dockerfile --cache-from $CI_REGISTRY_IMAGE:ansible -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:ansible
    - docker push $CI_REGISTRY_IMAGE:ansible

AnsibleServerCheck:
  stage: ansible
  image: $CI_REGISTRY_IMAGE:ansible
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ansible-playbook -i ansible/inventory ansible/server.yaml --extra-vars "ansible_become_pass=${SUDO} ansible_ssh_pass=${SUDO} ansible_python_interpreter=/usr/bin/python3" --check


AnsibleServer:
  stage: ansible
  image: $CI_REGISTRY_IMAGE:ansible
  needs: [AnsibleServerCheck]
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ansible-playbook -i ansible/inventory ansible/server.yaml --extra-vars "ansible_become_pass=${SUDO} ansible_ssh_pass=${SUDO} ansible_python_interpreter=/usr/bin/python3"

AnsibleDesktopCheck:
  stage: ansible
  image: $CI_REGISTRY_IMAGE:ansible
  allow_failure: true
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ansible-playbook -i ansible/inventory ansible/desktop.yaml --extra-vars "ansible_become_pass=${SUDO} ansible_ssh_pass=${SUDO} ansible_python_interpreter=/usr/bin/python3" --check

AnsibleDesktop:
  stage: ansible
  image: $CI_REGISTRY_IMAGE:ansible
  needs: [AnsibleDesktopCheck]
  allow_failure: true
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ansible-playbook -i ansible/inventory ansible/desktop.yaml --extra-vars "ansible_become_pass=${SUDO} ansible_ssh_pass=${SUDO} ansible_python_interpreter=/usr/bin/python3" --check

kubernetes-dashboard:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/kubernetes-dashboard

traefik:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/traefik

heimdall:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/heimdall

gitlab:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/gitlab

gitlab-runner:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/gitlab/gitlab-runner/

influxdb:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/influxdb

prometheus:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/prometheus

kube-state-metrics:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/kube-state-metrics

grafana:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/grafana

nextcloud:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/nextcloud

mariadb:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - sed -i "s,<PASSWORD>,${SUDO},g" kubernetes/mariadb/mariadb-env-configmap.yaml
    - kubectl apply -f kubernetes/mariadb

phpmyadmin:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/phpmyadmin

homeassistant:
  stage: kubernetes
  when: always
  needs: []
  image: dtzar/helm-kubectl
  environment: production
  script:
    - kubectl apply -f kubernetes/homeassistant
